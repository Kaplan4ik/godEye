{
  "overrides": [
    {
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "createDefaultProgram": true,
        "project": [
          "tsconfig.json",
          "e2e/tsconfig.json"
        ]
      },
      "plugins": [
        "eslint-plugin-import",
        "@angular-eslint/eslint-plugin",
        "eslint-plugin-jsdoc",
        "@angular-eslint/eslint-plugin-template",
        "eslint-plugin-prefer-arrow",
        "eslint-plugin-rxjs",
        "@typescript-eslint",
        "@typescript-eslint/tslint"
      ],
      "rules": {
        "@angular-eslint/component-selector": [
          "error",
          {
            "style": "kebab-case",
            "type": "element"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "style": "camelCase",
            "type": "attribute"
          }
        ],
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": "off",
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "Boolean": {
                "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
              },
              "Function": {
                "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
              },
              "Number": {
                "message": "Avoid using the `Number` type. Did you mean `number`?"
              },
              "Object": {
                "message": "Avoid using the `Object` type. Did you mean `object`?"
              },
              "String": {
                "message": "Avoid using the `String` type. Did you mean `string`?"
              },
              "Symbol": {
                "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
              }
            }
          }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {
            "allowExpressions": true
          }
        ],
        "@typescript-eslint/explicit-member-accessibility": [
          "off",
          {
            "accessibility": "explicit"
          }
        ],
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": [
              "public-static-field",
              "public-instance-field",
              "private-instance-field",
              "public-constructor",
              "public-static-method",
              "public-instance-method",
              "protected-static-method",
              "protected-instance-method",
              "private-static-method",
              "private-instance-method"
            ]
          }
        ],
        "@typescript-eslint/naming-convention": "off",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-inferrable-types": [
          "error",
          {
            "ignoreParameters": true
          }
        ],
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "off",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/triple-slash-reference": [
          "error",
          {
            "lib": "always",
            "path": "always",
            "types": "prefer-import"
          }
        ],
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/typedef": [
          "error",
          {
            "call-signature": true,
            "index-signature": true,
            "parameter": true,
            "property-declaration": true,
            "variable-declaration": true
          }
        ],
        "@typescript-eslint/unified-signatures": "error",
        "array-bracket-spacing": [
          "error",
          "never"
        ],
        "arrow-body-style": "error",
        "arrow-parens": [
          "off",
          "always"
        ],
        "brace-style": [
          "error",
          "1tbs"
        ],
        "comma-dangle": "off",
        "complexity": "off",
        "constructor-super": "error",
        "curly": [
          "error",
          "multi-line"
        ],
        "dot-notation": "error",
        "eol-last": "error",
        "eqeqeq": "error",
        "guard-for-in": "error",
        "id-blacklist": "error",
        "id-denylist": [
          "error",
          "any",
          "Number",
          "number",
          "String",
          "string",
          "Boolean",
          "boolean",
          "Undefined",
          "undefined"
        ],
        "id-match": "error",
        "import/no-deprecated": "warn",
        "import/order": "off",
        "indent": [
          "error",
          2,
          {
            "ArrayExpression": "first",
            "FunctionDeclaration": {
              "parameters": "first"
            },
            "FunctionExpression": {
              "parameters": "first"
            },
            "SwitchCase": 1
          }
        ],
        "jsdoc/check-alignment": "error",
        "jsdoc/check-indentation": "error",
        "jsdoc/newline-after-description": "error",
        "jsdoc/no-types": "error",
        "max-classes-per-file": "off",
        "max-len": [
          "error",
          {
            "code": 140,
            "ignorePattern": "^import .*"
          }
        ],
        "max-lines": [
          "error",
          500
        ],
        "new-parens": "error",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-cond-assign": "error",
        "no-console": [
          "error",
          {
            "allow": [
              "warn",
              "error"
            ]
          }
        ],
        "no-constant-condition": "error",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-duplicate-case": "error",
        "no-empty": "off",
        "no-empty-function": [
          "error",
          {
            "allow": [
              "constructors"
            ]
          }
        ],
        "no-eval": "error",
        "no-fallthrough": "error",
        "no-invalid-regexp": "error",
        "no-mixed-spaces-and-tabs": "error",
        "no-multi-spaces": "error",
        "no-multiple-empty-lines": [
          "error",
          {
            "max": 1
          }
        ],
        "no-new-wrappers": "error",
        "no-regex-spaces": "error",
        "no-restricted-imports": [
          "error",
          {
            "paths": [
              "rxjs/Rx"
            ],
            "patterns": [
              "projects/*"
            ]
          }
        ],
        "no-throw-literal": "error",
        "no-trailing-spaces": "error",
        "no-undef-init": "error",
        "no-underscore-dangle": "error",
        "no-unsafe-finally": "error",
        "no-unused-expressions": "error",
        "no-unused-labels": "error",
        "no-use-before-define": "off",
        "no-var": "error",
        "object-curly-spacing": [
          "error",
          "always"
        ],
        "object-shorthand": "error",
        "one-var": [
          "error",
          "never"
        ],
        "prefer-const": "error",
        "prefer-template": "error",
        "quote-props": [
          "error",
          "as-needed"
        ],
        "quotes": [
          "error",
          "single"
        ],
        "radix": "error",
        "rxjs/no-internal": "error",
        "rxjs/no-nested-subscribe": "error",
        "semi": "error",
        "spaced-comment": [
          "error",
          "always",
          {
            "markers": [
              "/"
            ]
          }
        ],
        "use-isnan": "error",
        "valid-typeof": "off"
      }
    },
    {
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "files": [
        "*.html"
      ],
      "rules": {
        "@angular-eslint/template/eqeqeq": "error",
        "@angular-eslint/template/no-negated-async": "off"
      }
    },
    {
      "env": {
        "jasmine": true
      },
      "files": [
        "src/**/*.spec.ts",
        "src/**/*.d.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json",
          "e2e/tsconfig.json"
        ]
      },
      "plugins": [
        "jasmine"
      ],
      "rules": {
        "@typescript-eslint/no-unused-vars": "off",
        "jasmine/prefer-toHaveBeenCalledWith": "off"
      }
    }
  ],
  "root": true
}
